name: Deploy to ECS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 12  # Fail if deployment takes longer than 12 minutes
    steps:
      - uses: actions/checkout@v3
      
      - name: Trigger deployment via webhook
        run: |
          echo "üöÄ Deployment triggered via CodeBuild webhook"
          echo "Version: ${{ github.event.head_commit.message }}"
          echo "Commit: ${{ github.sha }}"
      
      - name: Wait for deployment to complete
        timeout-minutes: 10
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          echo "Monitoring endpoint: http://ch-alb-2140286266.us-east-1.elb.amazonaws.com"
          
          # Wait 30 seconds for CodeBuild to start
          sleep 30
          
          # Check deployment status for up to 10 minutes
          for i in {1..20}; do
            echo ""
            echo "[$i/20] Checking deployment status..."
            
            # Try to get version
            VERSION=$(curl -s --max-time 5 http://ch-alb-2140286266.us-east-1.elb.amazonaws.com/version 2>/dev/null || echo "{}")
            HEALTH=$(curl -s --max-time 5 http://ch-alb-2140286266.us-east-1.elb.amazonaws.com/health 2>/dev/null || echo "{}")
            
            # Extract commit SHA from health endpoint if available
            if echo "$HEALTH" | grep -q "healthy"; then
              echo "‚úÖ Health check passed"
              
              # Extract version number from commit message (e.g., v0.3.5 from "v0.3.5: Fix...")
              EXPECTED_VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oE "^v[0-9]+\.[0-9]+\.[0-9]+" || echo "")
              
              if [ -n "$EXPECTED_VERSION" ]; then
                # Check if deployed version matches expected version
                if echo "$VERSION" | grep -q "$EXPECTED_VERSION"; then
                  echo "‚úÖ Deployment completed successfully!"
                  echo "Expected version: $EXPECTED_VERSION"
                  echo "Deployed version: $VERSION"
                  exit 0
                else
                  echo "‚è≥ Deployment in progress (waiting for $EXPECTED_VERSION)"
                fi
              else
                # Fallback: just check if version changed from previous
                echo "‚è≥ Deployment in progress (version check)"
              fi
            else
              echo "‚è≥ Service not yet healthy"
            fi
            
            # Wait 30 seconds before next check
            sleep 30
          done
          
          echo "‚ùå Deployment timeout - exceeded 10 minutes"
          exit 1
      
      - name: Verify final deployment
        if: success()
        run: |
          echo "üéâ Deployment verification:"
          curl -s http://ch-alb-2140286266.us-east-1.elb.amazonaws.com/version
          echo ""
          curl -s http://ch-alb-2140286266.us-east-1.elb.amazonaws.com/health
          echo ""
          echo "‚úÖ Deployment successful!"